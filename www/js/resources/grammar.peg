start = nodeProgram
nodeProgram = pgmName:programName sep "{{writtenBy}}" sep author:userName sep ("pour" sep target:target sep)? seqRules:seqRules
{
	var ast = {};
	ast.programName = pgmName;
	ast.seqParameters = [];
	ast.author = author;
	ast.target = "alice";
	ast.daemon = (seqRules[0][0].type === "NodeWhen");
	ast.seqDefinitions = [];
	ast.seqRules = seqRules;
	return ast;
}

programName "<input type='text'>"
	= chars:([^" \r\n]+) { return chars.join(""); }

userName "Nom de l'auteur"
	= chars:([^" \r\n]+) { return chars.join(""); }

target "Destinataire"
	= chars:([^" \r\n]+) { return chars.join(""); }

/* sequence of rules */
seqRules = seqAndRules1:seqAndRules seqAndRules2:(opThenRule seqAndRules)*
{
	var nodeSeqRules = new Array();
	nodeSeqRules.push(seqAndRules1);

	if (typeof seqAndRules2 !== "undefined") {
		seqAndRules2.forEach(function(seqAndRules) {
			nodeSeqRules.push(seqAndRules[1]);
		});
	}
	
	return nodeSeqRules;
}

seqAndRules = rule1:rule rule2:(opAndRule rule)*
{
	var nodeSeqAndRules = new Array();
	nodeSeqAndRules.push(rule1);

	if (typeof rule2 !== "undefined") {
		rule2.forEach(function(r) {
			nodeSeqAndRules.push(r[1]);
		});
	}

	return nodeSeqAndRules;
}

/* basic rule */
rule = nodeWhen / nodeIf / nodeAction

/* basic nodes */
nodeWhen = "<span class='keyword'> {{whenKeyWord}} </span>" seqEvents:seqEvents (opEventBool expBool)* "<span class='keyword prev-seqrules'> {{thenKeyWord}} </span>" seqRules:seqRules "<span class='keyword end-of-block'> {{endWhenBlock}} </span>"
{
	var nodeWhen = {};
	nodeWhen.type = "NodeWhen";
	nodeWhen.events = seqEvents;
	nodeWhen.seqRulesThen = seqRules;
	return nodeWhen;
}

nodeIf = "<span class='keyword'> {{ifKeyWord}} </span>" expBool:expBool "<span class='keyword prev-seqrules'> {{thenKeyWord}} </span>" seqRulesTrue:seqRules seqRulesFalse:("<span class='keyword end-of-block prev-seqrules'> {{elseKeyWord}} </span>" seqRules)? "<span class='keyword end-of-block'> {{endIfBlock}} </span>"
{
	console.log(seqRulesFalse);
	var nodeIf = {};
	nodeIf.type = "NodeIf";
	nodeIf.expBool = expBool;
	nodeIf.seqRulesTrue = seqRulesTrue;
	if (seqRulesFalse !== "") {
		nodeIf.seqRulesFalse = seqRulesFalse[1];
	} else {
		nodeIf.seqRulesFalse = [];
	}

	return nodeIf;
}

nodeAction = {{listOfActions}}

/* events */
seqEvents = event1:event event2:(opEvent event)*
{
	var nodeSeqEvents = new Array();
	nodeSeqEvents.push(event1);

	if (typeof event2 !== "undefined") {
		event2.forEach(function(event) {
			nodeSeqEvents.push(event[1]);
		});
	}

	return nodeSeqEvents;
}

event = {{listOfEvents}}

/* boolean and arithmetic expression */
expBool = seqAndBool1:seqAndBool seqAndBool2:(opOrBool seqAndBool)*
{
	var nodeExpBool = new Array();
	nodeExpBool.push(seqAndBool1);

	if (typeof seqAndBool2 !== "undefined") {
		seqAndBool2.forEach(function(seqAndBool) {
			nodeExpBool.push(seqAndBool[1]);
		});
	}

	return nodeExpBool;
}

seqAndBool = relation1:relation relation2:(opAndBool relation)*
{
	var nodeSeqAndBool = new Array();
	nodeSeqAndBool.push(relation1);

	if (typeof relation2 !== "undefined") {
		relation2.forEach(function(relation) {
			nodeSeqAndBool.push(relation[1]);
		});
	}

	return nodeSeqAndBool;
}

relation = status:status / term1:term operator:opComparison term2:term
{
	if (typeof status !== "undefined") {
		return status;
	}

	var nodeRelationBool = {};
	nodeRelationBool.type = "NodeRelationBool";
	nodeRelationBool.operator = operator;

	nodeRelationBool.leftOperand = term1;
	nodeRelationBool.rightOperand = term2;

	return nodeRelationBool;
}

term = termString / termNumber / termBoolean
termString = value:string
{
	var nodeTerm = {};
	nodeTerm.type = "string";
	nodeTerm.value = value;

	return nodeTerm;
}
termNumber = value:number
{
	var nodeTerm = {};
	nodeTerm.type = "number";
	nodeTerm.value = value;

	return nodeTerm;
}
termBoolean = value:boolean
{
	var nodeTerm = {};
	nodeTerm.type = "boolean";
	nodeTerm.value = value;

	return nodeTerm;
}

status = {{listOfStatus}}

/* programs */
actionProgram = actionProgramActivate / actionProgramDisactivate
actionProgramActivate = "<span class='action-name'> {{activateProgramAction}} </span>" programName:P
{
	var nodeAction = {};
	nodeAction.type = "NodeAction";
	nodeAction.targetType = "program";
	nodeAction.targetId = programs.findWhere({ name : $(programName).text() }).get("id");
	nodeAction.methodName = "callProgram";
	nodeAction.args = [];

	return nodeAction;
}

actionProgramDisactivate = "<span class='action-name'> {{disactivateProgramAction}} </span>" programName:P
{
	var nodeAction = {};
	nodeAction.type = "NodeAction";
	nodeAction.targetType = "program";
	nodeAction.targetId = programs.findWhere({ name : $(programName).text() }).get("id");
	nodeAction.methodName = "stopProgram";
	nodeAction.args = [];

	return nodeAction;
}

eventProgram = activatedProgramEvent / disactivatedProgramEvent
activatedProgramEvent = programName:P "<span class='event'> {{isActivatedProgramEvent}} </span>"
{
	var nodeEvent = {};
	nodeEvent.type = "NodeEvent";
	nodeEvent.sourceType = "program";
	nodeEvent.sourceId = programs.findWhere({ name : $(programName).text() }).get("id");
	nodeEvent.eventName = "runningState";
	nodeEvent.eventValue = "STARTED";

	return nodeEvent;
}

disactivatedProgramEvent = programName:P "<span class='event'> {{isDisactivatedProgramEvent}} </span>"
{
	var nodeEvent = {};
	nodeEvent.type = "NodeEvent";
	nodeEvent.sourceType = "program";
	nodeEvent.sourceId = programs.findWhere({ name : $(programName).text() }).get("id");
	nodeEvent.eventName = "runningState";
	nodeEvent.eventValue = "STOPPED";

	return nodeEvent;
}

statusProgram = isActivatedProgramStatus / isDisactivatedProgramStatus
isActivatedProgramStatus = programName:P "<span class='status'> {{isRunningProgramStatus}} </span>"
{
	var nodeRelationBool = {};
	nodeRelationBool.type = "NodeRelationBool";
	nodeRelationBool.operator = "==";

	nodeRelationBool.leftOperand = {};
	nodeRelationBool.leftOperand.targetType = "device";
	nodeRelationBool.leftOperand.targetId = "main";
	nodeRelationBool.leftOperand.methodName = "isProgramActive";
	nodeRelationBool.leftOperand.returnType = "boolean";
	nodeRelationBool.leftOperand.args = [{ type : "String", value : programs.findWhere({ name : $(programName).text() }).get("id") }];

	nodeRelationBool.rightOperand = {};
	nodeRelationBool.rightOperand.type = "boolean";
	nodeRelationBool.rightOperand.value = "true";

	return nodeRelationBool;
}
isDisactivatedProgramStatus = programName:P "<span class='status'> {{isStoppedProgramStatus}} </span>"
{
	var nodeRelationBool = {};
	nodeRelationBool.type = "NodeRelationBool";
	nodeRelationBool.operator = "==";

	nodeRelationBool.leftOperand = {};
	nodeRelationBool.leftOperand.targetType = "device";
	nodeRelationBool.leftOperand.targetId = "main";
	nodeRelationBool.leftOperand.methodName = "isProgramActive";
	nodeRelationBool.leftOperand.returnType = "boolean";
	nodeRelationBool.leftOperand.args = [{ type : "String", value : programs.findWhere({ name : $(programName).text() }).get("id") }];

	nodeRelationBool.rightOperand = {};
	nodeRelationBool.rightOperand.type = "boolean";
	nodeRelationBool.rightOperand.value = "false";

	return nodeRelationBool;
}
P = {{listOfPrograms}}

/* operators */
opEvent = "<span class='keyword'> {{opEvent}} </span>"
opEventBool = "<span class='keyword'> {{opEventBool}} </span>"
opAndRule = "<span class='keyword prev-seqrules'> {{opAndRule}} </span>"
opThenRule = "<span class='keyword prev-seqrules'> {{opThenRule}} </span>"
opOrBool = "<span class='keyword'> {{opOrBool}} </span>"
opAndBool = "<span class='keyword'> {{opAndBool}} </span>"
opComparison = opMoreThan / opLessThan
opMoreThan = "<span class='keyword'> {{opMoreThan}} </span>"
{
	return ">=";
}
opLessThan = "<span class='keyword'> {{opLessThan}} </span>"
{
	return "<=";
}
opAdd = "+" / "-"
opMult = "*" / "/"

/* basic types */
number "<form class='form-inline'><div class='form-group'><input type='text' class='form-control'></div><button type='button' class='btn btn-primary valid-value'>{{validButton}}</button></form>"
	= "<span class='value'>" digits:[0-9]+ "</span>"
{
	return parseInt(digits.join(""), 10);
}

string= chars:([a-zA-Z0-9@\.]+) { return chars.join(""); }

boolean = true / false
true = "{{true}}" { return true; }
false = "{{false}}" { return false; }

time "<form class='form-inline' role='form'><div class='form-group'><input type='text' id='time' class='form-control' placeholder='hh:mm'></div><button type='button' class='btn btn-primary valid-value'>{{validButton}}</button></form>"
	= "<span class='value'>" hour:[0-9]+ ":" minute:[0-9]+ "</span>"
{
	var time = devices.getCoreClock().get("moment").clone();
	time.set("hour", parseInt(hour.join("")));
	time.set("minute", parseInt(minute.join("")));
	time.set("second", 0);

	return time.valueOf();
}


emailAddress "<form class='form-inline' role='form'><div class='form-group'><input type='text' id='email-address' class='form-control' placeholder='e-mail'></div><button type='button' class='btn btn-primary valid-value'>{{validButton}}</button></form>"
	= "<span class='value'>" to:string "</span>"
{
	return to;
}

stringUrl= p:string "://" u:(string / "/" / ":")* {return p + "://" + u.join("")}

music "<form class='form-inline' role='form'><div class='form-group'><input type='hidden'><button class='btn btn-primary browse-media' data-target='#media-browser-modal' data-toggle='modal'>Parcourir</button><span id='playurl' style='display:none'></span></div></form>"
	= "<span class='music' url='" url:stringUrl "'>" name:(string / " " / "(" / ")")* "</span>"
{
    return url;
}

/* separators */
sep "{{space}}"
	= ' '+
