/*
 * Init of the vars and function symbol table
 */
{
  var variables = [];
  var targetType;
  var id;

  function addVariable(vName,obj) {
    if (typeof variables[vName] !== 'undefined') {
      error = { message : "Variable already defined : " + vName }
      throw error;
    }
    else {
      variables[vName] = obj;
    }
  }
var functions = [];
}
/*
 * Program
 */
pg = h:header _ d:declarations _ i:insts _
{
  p={};
  if (h['name']) {
    p.name = h['name'];
  }
  if (h['author']) {
    p.header = { author: h['author']}; 
  }
  if (h['daemon']) {
    p.daemon = h['daemon'];
  }
  p.definitions=d;
  p.body = {type:"setOfRules", rules:i};
  return p;
}

/*
 * Header
 */
header  = h:headerInst*
{
header=[];
  h.forEach(function(e) {
     header[e.key.toLowerCase()] = e.value;
  });

  return header;
}

headerInst = daemonInst / hInst

hInst = t:var_name _ ":" _ v:var_name "\n" 
{
  return {key:t, value:v};
}

daemonInst = "daemon" _ ":" _ v:bool "\n"
{
  return {key:"daemon", value:v};
}

/*
 * Declarations
 */

declarations "declarations" = v:var_decl* f:function_decl*
{
  return v.concat(f);
}

/*
 * Variables
 */

var_decl = "var" _ v:var_assignation _ ";"  _
{
  addVariable(v.var_name, v);
  return v;
}

var_assignation =  v:var_name _ "=" _ a:argument _
{
  a.var_name = v;
  return a;
}
 /  v:var_name _ "=" _ "[" _ o:arguments _ "]" _
{
  return { type:'list', id:v, var_name:v, list:o};
}
 / v:var_name _ "=" _ o:object _
{
  o.var_name = v;
  return o;
}

var_list = v:var_name _","_ o:var_list 
{
  return [{type:'variable',id: v, var_name:v}].concat(o);
}
 / v:var_name 
{
  return {type:'variable',id: v, var_name:v};
} 

var_name = f:[a-z] v:[a-zA-Z_0-9]+
{
  return [f].concat(v).join("");
}

device = "/" c:[^\/]+ "/" 
{
  return {type:"device",id:c.join("")};
}

program = "|" c:[^\|]+ "|" 
{
  return {type:"programCall",id:c.join("")};
}
/*
 * Fonctions
 */

function_decl = "function" _ f:var_name _ "(" p:parameter_def ")" _ "{" _ i:insts _ "}" _
{
  functions[f] = f;
  return {type:'function', id:f, seqDefinitions:p, seqRules:i};
}

parameter_def = v:par_list 
{
  return v;
}/ _

par_list = v:var_name _","_ o:par_list 
{
  l = {type:'variable',id:v, var_name:v};
  addVariable(v,l);
  return [l].concat(o);
}
 / v:var_name 
{
  o = {type:'variable',id:v, var_name:v};
  addVariable(v,o);
  return o;
} 


/*
 * Instructions
 */
insts = i:inst _ is:insts _
{
  return [i].concat(is);
} 
  / i:inst
{
  return [i];
}


inst = b:block _
{
return b;
}
/ d:inst_def _ ";"
{
  return d;
}
 
block = when / if / while

inst_def = ret 
 / keep_state
 / action 
 / function_call
 / v:var_assignation 
{
  return {type:"assignation", name:v.var_name, value:v}
}


ret = "return" _ a:argument
{
  return {type:"return", value:a};
}
 / "return"
{
 return {type:"return"}
}

function_call = f:var_name"("param:arguments")"
{
  if (typeof functions[f] !== 'undefined') {
    return {type:'functionNode', id:f, params:param}
  } else {
    throw { message: "Function undefined: " + f };
  }
}

arguments =  a:argument _ "," _ l:arguments
{
  return [a].concat(l);
} 
 / a:argument
{
  return [a];
}
 / _

argument = device / var / stringValue / numValue / boolean 

spokObject = program / device /var

var = v:var_name 
{
  if (typeof variables[v] !== 'undefined') {
    return {type:'variable', id:v}
  } else {
    throw { message: "Variable undefined: " + v };
  }
}

/*
 * Node Action
 */
action = v:spokObject "." method:var_name "(" action:arguments ")"
{
   return {type:'action',target:v,methodName:method,action:action};
   
}

/**
 * Node When
 */
when = "when" _ "[" _ e:events _"]"_ sepTHEN _ "{" _ i:insts _ "}" 
{
  return {type:'when',events:e,seqRulesThen:{type:"instructions", rules:i}};
}

/**
 * Node events
 */

events = e:evts _"/"_ i:int _ "/" _ d:int
{
  return {type:"events", events:e, duration:d, nbEventToOccur:i};
}

evts = e:evt _ "," _ es:evts 
{
  return [e].concat(es);
}
 / evt:evt
{
 return [evt];
}

evt  = v:spokObject "."  e:var_name "(" event:string ")"
{

  return {type:'event',source:v,eventName:e,eventValue:event};
}

/*
 * Node If
 */
if = "if"i b:relBool sepTHEN "{" _ t:insts _ "}" sepELSE "{" _ f:insts _ "}" 
{
  return {type:'if',expBool:  b,seqRulesTrue: {type:"instructions", rules:t},seqRulesFalse:{type:"instructions", rules:f}};
}

relBool = _ "(" left:operand _ o:operator _ right:operand ")"
{
  return {type:'binaryExpression',operator:o,leftOperand:left,rightOperand:right};
}

/*
 * Node Function
*/
function =  d:spokObject "." method:var_name "(" _ action:arguments _ ")"
{
   return {target:d,methodName:method,action:action};
}

/*
 * Node While
 */

while = "while" _ "(" _ s:state _ ")" _ "{" _ i1:inst _ "}" _ sepTHEN _ "{" _ i2:inst _ "}"
{
return {type:"while",state:s,rules:i1,rulesThen:i2};
}
 / "while" _ "(" _ s:state _ ")" _ "{" _ i1:inst _ "}"
{
return {type:"while",state:s,rules:i1,rulesThen:{}};
}

state = o:spokObject ".isOfState" _ "(" _ v:var_name _ ")" 
{

  return {type:"state", object:o, stateName:v};
}

/*
 * Node KeepState
 */

keep_state =   "_keep(" _ o:spokObject _ "," _ state:var_name _ ")"
{
return {type:"keepState", state:{type:"state",name:state, object:o}};
}


/*
 * Basic elements
 */

operator = "==" / ">=" / "<="

operand= relBool / boolean / stringValue / numValue / function

/* Nodes Value */

stringValue= c:string
{
obj = {};
  obj.type="string";
  obj.value=c;
  return obj;
}
numValue= n:[0-9]+
{
  return {type:'number', value:n.join("")};
}
boolean = v:bool
{
  return {type:'boolean',value: v};
}
bool = "true"i/"false"i

/*
 * Separators
 */

sepTHEN = _ "then"i _
sepELSE = _ "else"i _

/* JSON parser based on the grammar described at http://json.org/. */

/* ===== Syntactical Elements ===== */

start
  = _ object:object { return object; }

object
  = "{" _ "}" _                 { return {};      }
  / "{" _ members:members "}" _ { return members; }

members
  = head:pair tail:("," _ pair)* {
      var result = {};
      result[head[0]] = head[1];
      for (var i = 0; i < tail.length; i++) {
        result[tail[i][2][0]] = tail[i][2][1];
      }
      return result;
    }

pair
  = name:string ":" _ value:value { return [name, value]; }

array
  = "[" _ "]" _                   { return [];       }
  / "[" _ elements:elements "]" _ { return elements; }

elements
  = head:value tail:("," _ value)* {
      var result = [head];
      for (var i = 0; i < tail.length; i++) {
        result.push(tail[i][2]);
      }
      return result;
    }

value
  = string
  / number
  / object
  / array
  / "true" _  { return true;   }
  / "false" _ { return false;  }
  // FIXME: We can't return null here because that would mean parse failure.
  / "null" _  { return "null"; }

/* ===== Lexical Elements ===== */

string "string"
  = '"' '"' _             { return "";    }
  / '"' chars:chars '"' _ { return chars; }



chars
  = chars:char+ { return chars.join(""); }

char
  // In the original JSON grammar: "any-Unicode-character-except-"-or-\-or-control-character"
  = [^"\\\0-\x1F\x7f]
  / '\\"'  { return '"';  }
  / "\\\\" { return "\\"; }
  / "\\/"  { return "/";  }
  / "\\b"  { return "\b"; }
  / "\\f"  { return "\f"; }
  / "\\n"  { return "\n"; }
  / "\\r"  { return "\r"; }
  / "\\t"  { return "\t"; }
  / "\\u" h1:hexDigit h2:hexDigit h3:hexDigit h4:hexDigit {
      return String.fromCharCode(parseInt("0x" + h1 + h2 + h3 + h4));
    }

number "number"
  = int_:int frac:frac exp:exp _ { return parseFloat(int_ + frac + exp); }
  / int_:int frac:frac _         { return parseFloat(int_ + frac);       }
  / int_:int exp:exp _           { return parseFloat(int_ + exp);        }
  / int_:int _                   { return parseFloat(int_);              }

int
  = digit19:digit19 digits:digits     { return digit19 + digits;       }
  / digit:digit
  / "-" digit19:digit19 digits:digits { return "-" + digit19 + digits; }
  / "-" digit:digit                   { return "-" + digit;            }

frac
  = "." digits:digits { return "." + digits; }

exp
  = e:e digits:digits { return e + digits; }

digits
  = digits:digit+ { return digits.join(""); }

e
  = e:[eE] sign:[+-]? { return e + sign; }

/*
 * The following rules are not present in the original JSON gramar, but they are
 * assumed to exist implicitly.
 *
 * FIXME: Define them according to ECMA-262, 5th ed.
 */

digit
  = [0-9]

digit19
  = [1-9]

hexDigit
  = [0-9a-fA-F]

/* ===== Whitespace ===== */

_ "whitespace"
  = whitespace*

// Whitespace is undefined in the original JSON grammar, so I assume a simple
// conventional definition consistent with ECMA-262, 5th ed.
whitespace
  = [ \t\n\r]
