PG = SET
{
  return "ok";
}

SET = ID "setOfRules" _ "[" _ INSTS _ "]"

SEQ = ID "seqRules" _ "[" _ INSTS _ "]"

BLOC = SEQ

INSTS  = _ (INST _)+ / "(" INSTS ")"

INST  = IF / WHEN / WHILE / ACTION / EMPTY / WHILE_KEEP

IF  = ID "if" "(" BOOLEAN ")" _ "(" _ BLOC _ ")" _ "(" _ BLOC _ ")"
    / ID "if" "(" BOOLEAN ")" _ "(" _ BLOC _ ")" 

WHEN  = ID "when" _ "(" _ EVT _ ")" _ "(" _ BLOC _")"

WHILE  = ID "while" _ "(" _ STATE _ ")" _ "(" _ BLOC _ ")" _ "(" _ BLOC _ ")"

WHILE_KEEP = ID "while" _ "(" _ STATE _ ")" _ "(" _ KEEP _ ")" 

EVENTS  = ID "eventsSequence" _ "[" _ EVENTLIST _ "]"
        / ID "eventsAnd" _ "[" _ EVENTLIST _ "]"
        / ID "eventsOr" _ "[" _ EVENTLIST _ "]"
        / EVT

EVENTLIST = (EVENTS _)+

EVT  = ID "event" _ "(" _ TARGET _ ")"

BOOLEAN  = ID "booleanExpression" _"(" _ BOOLEAN _ ")" _ "(" _ BOOLEAN _ ")"
		 / ID "booleanExpression" _"(" _ BOOLEAN _ ")"
         / ACTION

ACTION = ID "action" _ "(" _ TARGET _ ")" _ "[" _ "]" 
       / ID "action" _ "[" _ "]"  _ "(" _ TARGET _ ")"

KEEP  = ID "keepState" _ "(" _ STATE _ ")"

STATE = ID "state" _ "(" _ TARGET _")"

TARGET = ID "variable" / ID "device" / EMPTY

EMPTY = ID "empty"

VALUE = ID "string" / ID "number" / ID "boolean"

ID "ID" = [0-9]+":"

/* ===== Whitespace ===== */

_ "whitespace"
  = whitespace*

// Whitespace is undefined in the original JSON grammar, so I assume a simple
// conventional definition consistent with ECMA-262, 5th ed.
whitespace
  = [ \t\n\r]