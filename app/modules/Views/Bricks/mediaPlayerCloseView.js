define( [
  "app",
  "views/brickview"
], function(App, BrickView) {

  var MediaPlayerCloseView = {};

  /**
	 * Class of a close view of a Media Player
	 */
  MediaPlayerCloseView = BrickView.extend({

		/**
		 * constructor
		 */
    initialize:function(){
      MediaPlayerCloseView.__super__.initialize.apply(this, arguments);
      this.color = "gray";
    },

		/**
		 * Adjust the text size and position inside the view
		 * @param text The Snap.svg text element to adjust
		 */
    adjustText:function(text) {
      var width = (this.w * this.size)/2;
      var height = (this.h * this.size)/8;
      var textBBox = text.getBBox();

      text.transform("t" + this.w*size/10 + "," + this.h*size/10 + "m" + width / textBBox.width  + ", 0, 0, " + height / textBBox.height + ", 0, 0");
    },

		/**
		 * Renders the view
		 */
    render:function() {
      var self = this;
      MediaPlayerCloseView.__super__.render.apply(this, arguments);

      if(!this.controlView) {
        var dt = this.dt;
        var size = this.getViewSize();
        var paper = Snap("#svgspace");
        var group  = paper.g();
        var rect = paper.rect(0.5*dt*size, 0.5*dt*size, size*(this.w-dt),size*(this.h-dt)).attr({fill:this.color,stroke:"black"});
        var text = paper.text(this.w*size/8, this.h*size/2, this.model.get("name"));
        this.adjustText(text);

        group.add(rect,text);


        Snap.load("app/img/button.svg", function(f){
          var wrap = f.select("svg");
          var w = wrap.attr("width");
          var h = wrap.attr("height");
          var buttonGroup = f.select("g");
          var width=self.w*size/2, height=self.h*size/8;
          var matrix = ""+width / w +", 0, 0, "+height / h +", 0,0";
          buttonGroup.transform("t"+[self.w*size/4,self.h*size*3/4] + "m"+matrix);
          buttonGroup.click(function(){

          });

          group.add(wrap)

        });

        this.controlView = group;

        this.bgRect.remove();
        this.root.add( this.controlView );
      }

      return this.root;
    },

		/**
		 * Removes all elements generated by the view
		 */
    deletePrimitives:function() {
      MediaPlayerCloseView.__super__.deletePrimitives.apply(this, []);

      if(this.controlView) {
        if(this.controlView.parentNode) {this.controlView.parentNode.removeChild(this.controlView);}
        this.controlView = null;
      }
    },

  });
  // Return the reference to the MediaPlayerCloseView
  return MediaPlayerCloseView;
});
